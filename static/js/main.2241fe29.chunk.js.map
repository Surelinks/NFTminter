{"version":3,"sources":["util/pinata.js","util/interact.js","Minter.js","App.js","reportWebVitals.js","index.js"],"names":["require","config","axios","pinJSONToIPFS","JSONBody","a","post","headers","pinata_api_key","process","pinata_secret_api_key","then","response","success","pinataUrl","data","IpfsHash","catch","error","console","log","message","web3","createAlchemyWeb3","contractABI","contractAddress","connectWallet","window","ethereum","request","method","addressArray","obj","status","address","target","href","getCurrentWalletConnected","length","mintNFT","url","name","description","trim","metadata","Object","image","pinataResponse","tokenURI","eth","Contract","contract","transactionParameters","to","from","selectedAddress","methods","encodeABI","params","txHash","Minter","props","useState","walletAddress","setWallet","setStatus","setName","setDescription","setURL","addWalletListener","on","accounts","useEffect","connectWalletPressed","walletResponse","onMintPressed","className","id","onClick","String","substring","type","placeholder","onChange","event","value","style","color","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"swKAAAA,EAAQ,IAAUC,SAClB,IAGMC,EAAQF,EAAQ,KAETG,EAAa,uCAAG,WAAMC,GAAN,SAAAC,EAAA,+HAGlBH,EACFI,KAJoB,iDAIVF,EAAU,CACjBG,QAAS,CACLC,eAXJC,uBAYIC,sBAXDD,sEAcNE,MAAK,SAAUC,GACb,MAAO,CACHC,SAAS,EACTC,UAAW,qCAAuCF,EAASG,KAAKC,aAGtEC,OAAM,SAAUC,GAEb,OADAC,QAAQC,IAAIF,GACL,CACHL,SAAS,EACTQ,QAASH,EAAMG,aApBF,2CAAH,sD,OCJ1BrB,EAAQ,IAAUC,SAClB,IAEMqB,GAAOC,EADiBvB,EAAQ,KAA9BuB,mBADWd,wEAIbe,EAAcxB,EAAQ,KACtByB,EAAkB,6CAEXC,EAAa,uCAAG,8BAAArB,EAAA,0DACrBsB,OAAOC,SADc,0CAGMD,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,wBAJW,cAGfC,EAHe,OAMfC,EAAM,CACVC,OAAQ,oEACRC,QAASH,EAAa,IARH,kBAUdC,GAVc,yDAYd,CACLE,QAAS,GACTD,OAAQ,gBAAQ,KAAIZ,UAdD,yDAkBhB,CACLa,QAAS,GACTD,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGE,OAAO,SAASC,KAAI,oCAAvB,2FAzBe,yDAAH,qDAoCXC,EAAyB,uCAAG,4BAAAhC,EAAA,0DACnCsB,OAAOC,SAD4B,0CAGRD,OAAOC,SAASC,QAAQ,CACjDC,OAAQ,iBAJyB,aAG7BC,EAH6B,QAMlBO,OAAS,GANS,yCAO1B,CACLJ,QAASH,EAAa,GACtBE,OAAQ,sEATuB,gCAY1B,CACLC,QAAS,GACTD,OAAQ,iEAduB,mFAkB5B,CACLC,QAAS,GACTD,OAAQ,gBAAQ,KAAIZ,UApBa,yDAwB9B,CACLa,QAAS,GACTD,OACE,+BACE,8BACG,IADH,eAEK,IACH,mBAAGE,OAAO,SAASC,KAAI,oCAAvB,2FA/B6B,0DAAH,qDA0CzBG,EAAO,uCAAG,WAAMC,EAAKC,EAAMC,GAAjB,uBAAArC,EAAA,yDAEH,IAAdmC,EAAIG,QAAgC,IAAfF,EAAKE,QAAsC,IAAtBD,EAAYC,OAFrC,yCAGZ,CACN9B,SAAS,EACToB,OAAQ,oEALU,cAUjBW,EAAW,IAAIC,QACZJ,KAAOA,EAChBG,EAASE,MAAQN,EACjBI,EAASF,YAAcA,EAbA,SAgBMvC,EAAcyC,GAhBpB,WAgBjBG,EAhBiB,QAiBHlC,QAjBG,0CAkBZ,CACHA,SAAS,EACToB,OAAQ,qEApBO,eAuBjBe,EAAWD,EAAejC,UAvBT,UAyBC,IAAIQ,EAAK2B,IAAIC,SAAS1B,EAAaC,GAzBpC,eAyBvBE,OAAOwB,SAzBgB,OA4BjBC,EAAwB,CAC5BC,GAAI5B,EACJ6B,KAAM3B,OAAOC,SAAS2B,gBACtB,KAAQ5B,OAAOwB,SAASK,QAAQjB,QAAQZ,OAAOC,SAAS2B,gBAAiBP,GAAUS,aA/B9D,oBAoCA9B,OAAOC,SACvBC,QAAQ,CACLC,OAAQ,sBACR4B,OAAQ,CAACN,KAvCI,eAoCfO,EApCe,yBAyCd,CACH9C,SAAS,EACToB,OAAQ,mFAAgF0B,IA3CvE,4DA8Cd,CACH9C,SAAS,EACToB,OAAQ,sCAA8B,KAAMZ,UAhD3B,2DAAH,0DCyBPuC,EA1GA,SAACC,GAAW,IAAD,EACWC,mBAAS,IADpB,mBACjBC,EADiB,KACFC,EADE,OAEIF,mBAAS,IAFb,mBAEjB7B,EAFiB,KAETgC,EAFS,OAIAH,mBAAS,IAJT,mBAIjBrB,EAJiB,KAIXyB,EAJW,OAKcJ,mBAAS,IALvB,mBAKjBpB,EALiB,KAKJyB,EALI,OAMFL,mBAAS,IANP,mBAMjBtB,EANiB,KAMZ4B,EANY,KAiBxB,SAASC,IACH1C,OAAOC,SACTD,OAAOC,SAAS0C,GAAG,mBAAmB,SAACC,GACjCA,EAASjC,OAAS,GACpB0B,EAAUO,EAAS,IACnBN,EAAU,uEAEVD,EAAU,IACVC,EAAU,oEAIdA,EACE,8BACG,IADH,eAEK,IACH,mBAAG9B,OAAO,SAASC,KAAI,oCAAvB,wFAzBRoC,oBAAS,sBAAC,gCAAAnE,EAAA,sEAC0BgC,IAD1B,gBACAH,EADA,EACAA,QAASD,EADT,EACSA,OAEjB+B,EAAU9B,GACV+B,EAAUhC,GAEVoC,IANQ,2CAOP,IA2BH,IAAMI,EAAoB,uCAAG,4BAAApE,EAAA,sEACEqB,IADF,OACrBgD,EADqB,OAE3BT,EAAUS,EAAezC,QACzB+B,EAAUU,EAAexC,SAHE,2CAAH,qDAMpByC,EAAa,uCAAG,gCAAAtE,EAAA,sEACckC,EAAQC,EAAKC,EAAMC,GADjC,gBACZ7B,EADY,EACZA,QAASoB,EADG,EACHA,OACjBgC,EAAUhC,GACNpB,IACFqD,EAAQ,IACRC,EAAe,IACfC,EAAO,KANW,2CAAH,qDAUnB,OACE,sBAAKQ,UAAU,SAAf,UACE,wBAAQC,GAAG,eAAeC,QAASL,EAAnC,SACGV,EAAczB,OAAS,EACtB,cACAyC,OAAOhB,GAAeiB,UAAU,EAAG,GACnC,MACAD,OAAOhB,GAAeiB,UAAU,IAEhC,oDAIJ,uBACA,oBAAIH,GAAG,QAAP,iEACA,yGAGA,iCACE,8DACA,uBACEI,KAAK,OACLC,YAAY,gDACZC,SAAU,SAACC,GAAD,OAAWhB,EAAOgB,EAAMjD,OAAOkD,UAE3C,qDACA,uBACEJ,KAAK,OACLC,YAAY,qBACZC,SAAU,SAACC,GAAD,OAAWlB,EAAQkB,EAAMjD,OAAOkD,UAE5C,4DACA,uBACEJ,KAAK,OACLC,YAAY,yCACZC,SAAU,SAACC,GAAD,OAAWjB,EAAeiB,EAAMjD,OAAOkD,aAGrD,wBAAQR,GAAG,aAAaC,QAASH,EAAjC,sBAGA,mBAAGE,GAAG,SAASS,MAAO,CAAEC,MAAO,OAA/B,SACGtD,QChGMuD,MARf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,cAAC,EAAD,OCMSa,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBhF,MAAK,YAAkD,IAA/CiF,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.2241fe29.chunk.js","sourcesContent":["require('dotenv').config();\r\nconst key = process.env.REACT_APP_PINATA_KEY;\r\nconst secret = process.env.REACT_APP_PINATA_SECRET;\r\n\r\nconst axios = require('axios');\r\n\r\nexport const pinJSONToIPFS = async(JSONBody) => {\r\n    const url = `https://api.pinata.cloud/pinning/pinJSONToIPFS`;\r\n    //making axios POST request to Pinata ⬇️\r\n    return axios\r\n        .post(url, JSONBody, {\r\n            headers: {\r\n                pinata_api_key: key,\r\n                pinata_secret_api_key: secret,\r\n            }\r\n        })\r\n        .then(function (response) {\r\n           return {\r\n               success: true,\r\n               pinataUrl: \"https://gateway.pinata.cloud/ipfs/\" + response.data.IpfsHash\r\n           };\r\n        })\r\n        .catch(function (error) {\r\n            console.log(error)\r\n            return {\r\n                success: false,\r\n                message: error.message,\r\n            }\r\n\r\n    });\r\n};","import {pinJSONToIPFS} from './pinata.js'\r\n\r\nrequire('dotenv').config();\r\nconst alchemyKey = process.env.REACT_APP_ALCHEMY_KEY;\r\nconst { createAlchemyWeb3 } = require(\"@alch/alchemy-web3\");\r\nconst web3 = createAlchemyWeb3(alchemyKey);\r\n\r\nconst contractABI = require('../contract-abi.json')\r\nconst contractAddress = \"0xA5AB4e0Fe6ACE3a792C9b695ac070235eA475403\";\r\n\r\nexport const connectWallet = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_requestAccounts\",\r\n        });\r\n        const obj = {\r\n          status: \"👆🏽 Write a message in the text-field above.\",\r\n          address: addressArray[0],\r\n        };\r\n        return obj;\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n  export const getCurrentWalletConnected = async () => {\r\n    if (window.ethereum) {\r\n      try {\r\n        const addressArray = await window.ethereum.request({\r\n          method: \"eth_accounts\",\r\n        });\r\n        if (addressArray.length > 0) {\r\n          return {\r\n            address: addressArray[0],\r\n            status: \"👆🏽 Write a message in the text-field above.\",\r\n          };\r\n        } else {\r\n          return {\r\n            address: \"\",\r\n            status: \"🦊 Connect to Metamask using the top right button.\",\r\n          };\r\n        }\r\n      } catch (err) {\r\n        return {\r\n          address: \"\",\r\n          status: \"😥 \" + err.message,\r\n        };\r\n      }\r\n    } else {\r\n      return {\r\n        address: \"\",\r\n        status: (\r\n          <span>\r\n            <p>\r\n              {\" \"}\r\n              🦊{\" \"}\r\n              <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n                You must install Metamask, a virtual Ethereum wallet, in your\r\n                browser.\r\n              </a>\r\n            </p>\r\n          </span>\r\n        ),\r\n      };\r\n    }\r\n  };\r\n\r\n  export const mintNFT = async(url, name, description) => {\r\n    //error handling\r\n    if (url.trim() == \"\" || (name.trim() == \"\" || description.trim() == \"\")) {\r\n      return {\r\n       success: false,\r\n       status: \"❗Please make sure all fields are completed before minting.\",\r\n      }\r\n     }\r\n   \r\n  //make metadata\r\n  const metadata = new Object();\r\n  metadata.name = name;\r\n  metadata.image = url;\r\n  metadata.description = description;\r\n\r\n  //make pinata call\r\n  const pinataResponse = await pinJSONToIPFS(metadata);\r\n  if (!pinataResponse.success) {\r\n      return {\r\n          success: false,\r\n          status: \"😢 Something went wrong while uploading your tokenURI.\",\r\n      }\r\n  }\r\n  const tokenURI = pinataResponse.pinataUrl;\r\n  //load smartcontract \r\n  window.contract = await new web3.eth.Contract(contractABI, contractAddress);\r\n\r\n  //set up your Ethereum transaction\r\n  const transactionParameters = {\r\n    to: contractAddress, // Required except during contract publications.\r\n    from: window.ethereum.selectedAddress, // must match user's active address.\r\n    'data': window.contract.methods.mintNFT(window.ethereum.selectedAddress, tokenURI).encodeABI() //make call to NFT smart contract\r\n};\r\n\r\n//sign transaction via Metamask\r\ntry {\r\n    const txHash = await window.ethereum\r\n        .request({\r\n            method: 'eth_sendTransaction',\r\n            params: [transactionParameters],\r\n        });\r\n    return {\r\n        success: true,\r\n        status: \"✅ Check out your transaction on Etherscan: https://ropsten.etherscan.io/tx/\" + txHash\r\n    }\r\n} catch (error) {\r\n    return {\r\n        success: false,\r\n        status: \"😥 Something went wrong: \" + error.message\r\n    }\r\n}\r\n}","import { useEffect, useState } from \"react\";\r\nimport {\r\n  connectWallet,\r\n  getCurrentWalletConnected,\r\n  mintNFT,\r\n} from \"./util/interact.js\";\r\n\r\nconst Minter = (props) => {\r\n  const [walletAddress, setWallet] = useState(\"\");\r\n  const [status, setStatus] = useState(\"\");\r\n\r\n  const [name, setName] = useState(\"\");\r\n  const [description, setDescription] = useState(\"\");\r\n  const [url, setURL] = useState(\"\");\r\n\r\n  useEffect(async () => {\r\n    const { address, status } = await getCurrentWalletConnected();\r\n\r\n    setWallet(address);\r\n    setStatus(status);\r\n\r\n    addWalletListener();\r\n  }, []);\r\n\r\n  function addWalletListener() {\r\n    if (window.ethereum) {\r\n      window.ethereum.on(\"accountsChanged\", (accounts) => {\r\n        if (accounts.length > 0) {\r\n          setWallet(accounts[0]);\r\n          setStatus(\"👆🏽 Write a message in the text-field above.\");\r\n        } else {\r\n          setWallet(\"\");\r\n          setStatus(\"🦊 Connect to Metamask using the top right button.\");\r\n        }\r\n      });\r\n    } else {\r\n      setStatus(\r\n        <p>\r\n          {\" \"}\r\n          🦊{\" \"}\r\n          <a target=\"_blank\" href={`https://metamask.io/download.html`}>\r\n            You must install Metamask, a virtual Ethereum wallet, in your\r\n            browser.\r\n          </a>\r\n        </p>\r\n      );\r\n    }\r\n  }\r\n\r\n  const connectWalletPressed = async () => {\r\n    const walletResponse = await connectWallet();\r\n    setStatus(walletResponse.status);\r\n    setWallet(walletResponse.address);\r\n  };\r\n\r\n  const onMintPressed = async () => {\r\n    const { success, status } = await mintNFT(url, name, description);\r\n    setStatus(status);\r\n    if (success) {\r\n      setName(\"\");\r\n      setDescription(\"\");\r\n      setURL(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"Minter\">\r\n      <button id=\"walletButton\" onClick={connectWalletPressed}>\r\n        {walletAddress.length > 0 ? (\r\n          \"Connected: \" +\r\n          String(walletAddress).substring(0, 6) +\r\n          \"...\" +\r\n          String(walletAddress).substring(38)\r\n        ) : (\r\n          <span>Connect Wallet</span>\r\n        )}\r\n      </button>\r\n\r\n      <br></br>\r\n      <h1 id=\"title\">🧙‍♂️ Surelinks NFT Minter</h1>\r\n      <p>\r\n        Simply add your asset's link, name, and description, then press \"Mint.\"\r\n      </p>\r\n      <form>\r\n        <h2>🖼 Link to asset: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. https://gateway.pinata.cloud/ipfs/<hash>\"\r\n          onChange={(event) => setURL(event.target.value)}\r\n        />\r\n        <h2>🤔 Name: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. My first NFT!\"\r\n          onChange={(event) => setName(event.target.value)}\r\n        />\r\n        <h2>✍️ Description: </h2>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"e.g. Even cooler than cryptokitties ;)\"\r\n          onChange={(event) => setDescription(event.target.value)}\r\n        />\r\n      </form>\r\n      <button id=\"mintButton\" onClick={onMintPressed}>\r\n        Mint NFT\r\n      </button>\r\n      <p id=\"status\" style={{ color: \"red\" }}>\r\n        {status}\r\n      </p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Minter;\r\n","import './App.css';\r\nimport Minter from './Minter'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <Minter></Minter>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}